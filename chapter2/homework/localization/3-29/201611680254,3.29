{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "练习 1：仿照求$ \\sum_{i=1}^mi + \\sum_{i=1}^ni  + \\sum_{i=1}^ki$的完整代码，写程序，可求m!+n!+k!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "请输入第1个整数，以回车结束。1\n",
      "请输入第2个整数，以回车结束。2\n",
      "请输入第3个整数，以回车结束。3\n",
      "最终的和是： 9\n"
     ]
    }
   ],
   "source": [
    "def compute_sum(end):\n",
    "    i = 1\n",
    "    product_n = 1\n",
    "\n",
    "    while i < end:\n",
    "        i = i + 1\n",
    "        product_n = product_n * i\n",
    "\n",
    "    return product_n\n",
    "\n",
    "n = int(input('请输入第1个整数，以回车结束。'))\n",
    "m = int(input('请输入第2个整数，以回车结束。'))\n",
    "k = int(input('请输入第3个整数，以回车结束。'))\n",
    "\n",
    "print('最终的和是：', compute_sum(m) + compute_sum(n) + compute_sum(k))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "练习 2：写函数可返回1-1/3+1/5-1/7...的前n项的和。在主程序中，分别令n=1000及100000，打印4倍该函数的和。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1425916543395442\n",
      "3.1416026534897203\n"
     ]
    }
   ],
   "source": [
    "def compute_sum(end):\n",
    "    i=1\n",
    "    total_n=1\n",
    "    \n",
    "    while i<= end:\n",
    "        i=i+1\n",
    "        total_n=(1/(2*i-1))*((-1)**(i+1))+total_n\n",
    "    return total_n\n",
    "\n",
    "#主程序\n",
    "n=1000\n",
    "print(4*compute_sum(n))\n",
    "\n",
    "n=100000\n",
    "print(4*compute_sum(n))\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "练习 3：将task3中的练习1及练习4改写为函数，并进行调用。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "task3: practice1 写程序，可由键盘读入用户姓名例如Mr. right，让用户输入出生的月份与日期，判断用户星座，假设用户是金牛座，则输出，Mr. right，你是非常有性格的金牛座！。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "请输入你的姓名ivy\n",
      "请输入你的生日11.27\n",
      "('ivy', '你是非常骚气的射手座')\n"
     ]
    }
   ],
   "source": [
    "def star(n):\n",
    "    if 3.20<birthday<4.20:\n",
    "        return (name,'你是非常热情的白羊座')\n",
    "    elif 4.20<birthday<5.21:\n",
    "        return (name,'你是非常稳重的金牛座')\n",
    "    elif 5.21<birthday<6.22:\n",
    "        return (name,'你是非常纠结的双子座')\n",
    "    elif 6.22<birthday<7.23:\n",
    "        return (name,'你是非常暖心的巨蟹座')\n",
    "    elif 7.23<birthday<8.23:\n",
    "        return (name,'你是非常帅气的狮子座')\n",
    "    elif 8.23<birthday<9.23:\n",
    "        return (name,'你是非常傲娇的处女座')\n",
    "    elif 9.23<birthday<10.24:\n",
    "        return (name,'你是非常貌美的天秤座')\n",
    "    elif 10.23<birthday<11.23:\n",
    "        return (name,'你是非常可爱的天蝎座')\n",
    "    elif 11.23<birthday<12.22:\n",
    "        return (name,'你是非常骚气的射手座')\n",
    "    elif 12.22<birthday<12.32 or 1.00<birthday<1.20:\n",
    "        return (name,'是非常死心眼的摩羯座')\n",
    "    elif 1.20<birthday<2.19:\n",
    "        return (name,'你是非常矫情的水瓶座')\n",
    "    elif 2.18<birthday<3.21:\n",
    "        return (name,'你是非常有爱的双鱼座')\n",
    "    \n",
    "\n",
    "#主程序\n",
    "name=input('请输入你的姓名')\n",
    "birthday=float(input('请输入你的生日'))\n",
    "\n",
    "print(star(n))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "task3 practice4：英文单词单数转复数，要求输入一个英文单词，，some_string.endswith(some_letter)函数可以判断某字符串结尾字符）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "请输入一个英文单词fix\n",
      "('fix', 'es')\n"
     ]
    }
   ],
   "source": [
    "def pl(n):\n",
    "\n",
    "    if word.endswith('x'):\n",
    "        return (word,'es')\n",
    "    elif word.endswith('sh'):\n",
    "        return (word,'es')\n",
    "    else:\n",
    "        return (word,'s')\n",
    "\n",
    "#主程序\n",
    "word=str(input(\"请输入一个英文单词\"))\n",
    "print(pl(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "挑战性练习：写程序，可以求从整数m到整数n累加的和，间隔为k，求和部分需用函数实现，主程序中由用户输入m，n，k调用函数验证正确性。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "请输入第1个整数，以回车结束。2\n",
      "请输入比第1个整数大的第2个整数，以回车结束。5\n",
      "最终的和是： 14\n"
     ]
    }
   ],
   "source": [
    "m = int(input('请输入第1个整数，以回车结束。'))\n",
    "n = int(input('请输入比第1个整数大的第2个整数，以回车结束。'))\n",
    "k = n - m\n",
    "\n",
    "\n",
    "def compute_sum(k):\n",
    "    i = 0\n",
    "    total_n = m\n",
    "\n",
    "    while i < k:\n",
    "        i = i + 1\n",
    "        total_n = total_n + m+i\n",
    "\n",
    "    return total_n\n",
    "\n",
    "\n",
    "\n",
    "print('最终的和是：', compute_sum(k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
